@model CheckoutShippingMethodModel

<div class="checkout-data">
    @if (Model.DisplayPickupInStore && Model.PickupPointsModel.AllowPickupInStore)
    {
        @await Html.PartialAsync("_PickupPoints", Model.PickupPointsModel)
        <script>
            $(document).ready(function () {
                $(document).unbind('checkout_toggle_pickup_in_store');
                $(document).on('checkout_toggle_pickup_in_store', function (e) {
                    if (e.checked)
                        $('#shipping-methods-form').hide();
                    else
                        $('#shipping-methods-form').show();
                });
            });
        </script>
    }
    @if (Model.PickupPointsModel == null || !Model.PickupPointsModel.PickupInStoreOnly)
    {
        <div class="section shipping-method" id="shipping-methods-form">
            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.OpCheckoutShippingMethodTop, additionalData = Model })
            @if (Model.Warnings.Count == 0)
            {
                <div class="card fit-content">
                @*<ul class="method-list">*@
                    <ul class="list-group list-group-flush">
                        @for (var i = 0; i < Model.ShippingMethods.Count; i++)
                        {
                            var shippingMethod = Model.ShippingMethods[i];
                            @*<li>
                                <div class="method-name">
                                    <input id="shippingoption_@(i)" type="radio" name="shippingoption" value="@(shippingMethod.Name)___@(shippingMethod.ShippingRateComputationMethodSystemName)" checked="@shippingMethod.Selected" />
                                    <label for="shippingoption_@(i)">@T("Checkout.SelectShippingMethod.MethodAndFee", shippingMethod.Name, shippingMethod.Fee)</label>
                                </div>
                                @if (!string.IsNullOrEmpty(shippingMethod.Description))
                                {
                                    <div class="method-description">
                                        @Html.Raw(shippingMethod.Description)
                                    </div>
                                }
                            </li>*@
                            <li class="list-group-item">
                                <div class="form-check">
                                    <input  class="form-check-input" style="margin-top:2px;" id="shippingoption_@(i)" type="radio" name="shippingoption" value="@(shippingMethod.Name)___@(shippingMethod.ShippingRateComputationMethodSystemName)" checked="@shippingMethod.Selected">
                                    <label class="form-check-label-name" for="shippingoption_@(i)">
                                        @shippingMethod.Name
                                        
                                    </label>
                                    <label class="form-check-label-fee" for="shippingoption_@(i)">
                                        @shippingMethod.Fee
                                    </label>
                                    @if (shippingMethod.TransitDays != -1)
                                    {
                                        <br />
                                        <span style="float:left;margin-left:18px;font-size:12px">
                                            @shippingMethod.TransitDays to @(shippingMethod.TransitDays + shippingMethod.TransitDayAdder) business days
                                        </span>
                                    }
                                </div>
                            </li>
                        }
                    </ul>
                </div>
                @*</ul>*@
                if (Model.NotifyCustomerAboutShippingFromMultipleLocations)
                {
                    <div class="multiple-locations">
                        @T("Checkout.ShippingMethod.ShippingFromMultipleLocations")
                    </div>
                }
            }
            else
            {
                <div class="message-error">
                    <ul>
                        @foreach (var warning in Model.Warnings)
                        {
                            <li>@warning</li>
                        }
                    </ul>
                </div>
            }
            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.OpCheckoutShippingMethodBottom, additionalData = Model })
        </div>
    }
</div>
